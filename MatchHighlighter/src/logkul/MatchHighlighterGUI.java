/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package logkul;

import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 *
 * Author: Logan, NetBeans IDE Java GUI Generator
 * Assignment: HW1
 * Due Date: 9/5/2022
 * 
 */

// This class is a custom filter class for the FileChooser
// that only allows ".txt" files to be selected, and provides
// a description for that type of file.
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "Text documents (*.txt)";
    }
}

public class MatchHighlighterGUI extends javax.swing.JFrame {

    /**
     * Creates new form MatchHighlighterGUI
     */
    public MatchHighlighterGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileExplorer = new javax.swing.JFileChooser();
        fileTextScrollPane = new javax.swing.JScrollPane();
        fileTextPane = new javax.swing.JTextPane();
        keywordLabel = new javax.swing.JLabel();
        keywordTextField = new javax.swing.JTextField();
        highlightButton = new javax.swing.JButton();
        matchCaseCheckBox = new javax.swing.JCheckBox();
        openButton = new javax.swing.JButton();
        matchPercentLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileExplorer.setAcceptAllFileFilterUsed(false);
        fileExplorer.setDialogTitle("Open Text File");
        fileExplorer.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Match Highlighter");

        fileTextPane.setEditable(false);
        fileTextScrollPane.setViewportView(fileTextPane);

        keywordLabel.setText("Keyword:");

        keywordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordTextFieldActionPerformed(evt);
            }
        });

        highlightButton.setText("Highlight");
        highlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightButtonActionPerformed(evt);
            }
        });

        matchCaseCheckBox.setText("Match Case");

        openButton.setText("Open File");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        matchPercentLabel.setText("Match Percent: %0.00");

        jMenu1.setText("File");

        jMenuItem1.setText("Open File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileTextScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keywordLabel)
                            .addComponent(openButton))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highlightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(matchCaseCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(matchPercentLabel)
                                .addGap(34, 34, 34)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileTextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keywordLabel)
                    .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(highlightButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchCaseCheckBox)
                    .addComponent(openButton)
                    .addComponent(matchPercentLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Set Application Title by Override JFrame function
    @Override
    public void setTitle(String title) {
        super.setTitle("Match Highlighter v1.0"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }
    
    // Redundant code, ended up not being needed, but generated by NetBeans
    private void keywordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordTextFieldActionPerformed
    
    // Code that reads the text in the keyword text box, and uses it to highlight
    // any necessary text in the text pane. Highlights are reset before every use.
    // Newlines have to be accounted for when finding the index of the keyword, so
    // this is accounted for in the backend when attempting to find an index.
    private void highlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightButtonActionPerformed
        // This is where the text in the fileTextPane should be highlighted
        Highlighter highlighter = fileTextPane.getHighlighter();
        highlighter.removeAllHighlights();
        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.red);
        boolean matchCase = matchCaseCheckBox.isSelected();
        String keyword = keywordTextField.getText();
        String searchText = fileTextPane.getText();
        searchText = searchText.replaceAll("\n", "");
        if (matchCase == false) {
            keyword = keyword.toLowerCase();
            searchText = searchText.toLowerCase();
        }
        int index = (searchText).indexOf(keyword);
        int count = 0;
        System.out.println("Keyword: [" + keyword + "], index: [" + index + "], length: [" + keyword.length() + "]");
        while (index >= 0) {
            try {
                highlighter.addHighlight(index, (index + keyword.length()), painter);
                index = (searchText).indexOf(keyword, index+1);
                count++;
            } catch (BadLocationException ex) {
                Logger.getLogger(MatchHighlighterGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        double d = ((100.00 * keyword.length() * count) / (1.00 * searchText.length()));
        matchPercentLabel.setText("Match Percent: %" + String.format("%.2f", d));
        System.out.println("Count: " + count + ", Match Percent: %" + String.format("%.2f", d));
        System.out.println("Double d: " + d);
    }//GEN-LAST:event_highlightButtonActionPerformed
    
    // Code that brings up the FileChooser component when the "open file" menu
    // action is picked, limited to ".txt" files only. Highlighter is also reset
    // every time a new file is opened, so that old highlights aren't visible
    // when loading a new file. 
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int returnVal = fileExplorer.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileExplorer.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              fileTextPane.read( new FileReader( file.getAbsolutePath() ), null );
            } catch (IOException ex) {
              System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        try {
            Highlighter highlighter = fileTextPane.getHighlighter();
            highlighter.removeAllHighlights();
        }
        catch (Exception e) {
            System.out.println("Highlighter removal failed: " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    // This isn't necessary, because it is possible to just close the application,
    // but it still seems nice to have.
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed
    
    // Another button for opening the FileChooser, same code as before, but
    // for another and, in my opinion, more convenient button.
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        int returnVal = fileExplorer.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileExplorer.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              fileTextPane.read( new FileReader( file.getAbsolutePath() ), null );
            } catch (IOException ex) {
              System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        try {
            Highlighter highlighter = fileTextPane.getHighlighter();
            highlighter.removeAllHighlights();
        }
        catch (Exception e) {
            System.out.println("Highlighter removal failed: " + e.getMessage());
        }
    }//GEN-LAST:event_openButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchHighlighterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchHighlighterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchHighlighterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchHighlighterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchHighlighterGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JFileChooser fileExplorer;
    private javax.swing.JTextPane fileTextPane;
    private javax.swing.JScrollPane fileTextScrollPane;
    private javax.swing.JButton highlightButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel keywordLabel;
    private javax.swing.JTextField keywordTextField;
    private javax.swing.JCheckBox matchCaseCheckBox;
    private javax.swing.JLabel matchPercentLabel;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
}
